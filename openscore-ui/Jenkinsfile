pipeline {
    agent {
        label "nodejs"
    }
    options { 
        skipDefaultCheckout() 
    }
    stages {
        stage("Checkout") {
            steps {
              git branch: env.BRANCH, url: env.REPO
            }
        }
        stage("Build") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("openscore") {
                            dir("openscore-ui") {
                                sh  "npm install"
                                sh  "./node_modules/@angular/cli/bin/ng build --prod --aot"
                            }
                            
                            if (!openshift.selector("bc", "openscore-ui").exists()) {
                                // Creates the application if not exists
                                openshift.newBuild("httpd:2.4", "--binary", "--name=openscore-ui");                  
                            } else {
                                // Starts a new build and waits for its completion
                                openshift.selector("bc", "openscore-ui").startBuild("--from-dir=./openscore-ui/dist", "--wait=true");
                            }
                        }
                    }
                }
            }
        }
        stage("Deploy") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("openscore") {
                            if (!openshift.selector("dc", "openscore-ui").exists()) {
                                createApp("openscore-ui", "latest");    

                                // Creates the application and get the brand new BuildConfig
                                def dc = openshift.newApp("openscore-ui:latest").narrow("dc");
                                // Creates the app Route
                                openshift.selector("svc", "openscore-ui").expose();

                                // Waits for the deployment to finish
                                while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                    sleep 10
                                }
                                
                                // Removes the triggers  
                                openshift.set("triggers", "dc/openscore-ui", "--manual");               
                            } else {
                                // Rollouts to latest version
                                openshift.selector("dc", "openscore-ui").rollout().latest();   
                            }          
                        }
                    }
                }
            }
        }      
    }
}
