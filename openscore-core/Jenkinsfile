pipeline {
    agent {
        label "maven"
    }
    options { 
        skipDefaultCheckout() 
    }
    stages {
        stage("Checkout") {
            steps {
                git branch: env.BRANCH, url: env.REPO
            }
        }
        stage("Compile") {
            steps {
                script{
                    openshift.withCluster() {
                        openshift.verbose();
                        openshift.withProject("openscore") {
                            dir("openscore-core") {
                                sh "mvn clean package -DskipTests -Popenshift"
                            }
                        }
                    }
                }
            }
        }
        stage("Build") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.verbose();
                        openshift.withProject("openscore") {

                            if (!openshift.selector("bc", "openscore-core").exists()) {
                                openshift.newBuild("--image-stream=wildfly:10.1", "--name=openscore-core", "--binary=true");                   
                            }

                                // Starts a new build and waits for its completion
                            openshift.selector("bc", "openscore-core").startBuild("--from-dir=./openscore-core/target/ROOT.war","--wait=true");
                            
                        }
                    }
                }
            }
        }
        stage("Deploy") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("openscore") {
                            if (!openshift.selector("dc", "openscore-core").exists()) {
                                // Creates the application and get the brand new BuildConfig
                                def dc = openshift.newApp("openscore-core:latest").narrow("dc");
                                // Creates the app Route
                                openshift.selector("svc", "openscore-core").expose();

                                // Waits for the deployment to finish
                                while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                    sleep 10
                                }
                                
                                // Removes the triggers  
                                openshift.set("triggers", "dc/openscore-core", "--manual");                 
                            } 
                                // Rollouts to latest version
                                openshift.selector("dc", "openscore-core").rollout().latest();   
                                     
                        }
                    }
                }
            }
        }      
    }
}